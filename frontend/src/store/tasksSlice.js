import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'; import api from '../api/api'; export const fetchProject = createAsyncThunk('tasks/fetchProject', async (projectId)=>{ const res = await api.get('/projects/'+projectId); return res.data; }); export const createTask = createAsyncThunk('tasks/create', async (payload)=>{ const res = await api.post('/tasks', payload); return res.data; }); export const updateTask = createAsyncThunk('tasks/update', async ({id,data})=>{ const res = await api.put('/tasks/'+id, data); return res.data; }); export const deleteTask = createAsyncThunk('tasks/delete', async (id)=>{ await api.delete('/tasks/'+id); return { id }; }); const slice = createSlice({ name:'tasks', initialState:{ project:null, tasks:[], loading:false, error:null }, reducers:{}, extraReducers:(b)=>{ b.addCase(fetchProject.pending,(s)=>{s.loading=true}); b.addCase(fetchProject.fulfilled,(s,a)=>{s.loading=false; s.project=a.payload.project; s.tasks=a.payload.tasks}); b.addCase(fetchProject.rejected,(s,a)=>{s.loading=false; s.error=a.error.message}); b.addCase(createTask.fulfilled,(s,a)=>{s.tasks.push(a.payload)}); b.addCase(updateTask.fulfilled,(s,a)=>{s.tasks=s.tasks.map(t=> t.id===a.payload.id? a.payload: t)}); b.addCase(deleteTask.fulfilled,(s,a)=>{s.tasks=s.tasks.filter(t=> t.id!==a.payload.id)}); } }); export default slice.reducer;