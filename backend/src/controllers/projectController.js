const { Project, Task } = require('../models'); const { validationResult } = require('express-validator'); exports.createProject = async (req, res) => { const errors = validationResult(req); if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() }); try { const project = await Project.create({ title: req.body.title, description: req.body.description, ownerId: req.user.id }); res.json(project); } catch (err) { console.error(err); res.status(500).json({ message: 'Server error' }); } }; exports.listProjects = async (req, res) => { try { const projects = await Project.findAll({ where: { ownerId: req.user.id } }); res.json(projects); } catch (err) { console.error(err); res.status(500).json({ message: 'Server error' }); } }; exports.getProject = async (req, res) => { try { const project = await Project.findOne({ where: { id: req.params.id, ownerId: req.user.id } }); if (!project) return res.status(404).json({ message: 'Not found' }); const tasks = await Task.findAll({ where: { projectId: project.id }, include: ['assignee'] }); res.json({ project, tasks }); } catch (err) { console.error(err); res.status(500).json({ message: 'Server error' }); } }; exports.deleteProject = async (req, res) => { try { const project = await Project.findOne({ where: { id: req.params.id, ownerId: req.user.id } }); if (!project) return res.status(404).json({ message: 'Not found' }); await project.destroy(); res.json({ success: true }); } catch (err) { console.error(err); res.status(500).json({ message: 'Server error' }); } };
