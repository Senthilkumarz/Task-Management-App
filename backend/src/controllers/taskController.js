const { Task, Project } = require('../models'); const { validationResult } = require('express-validator'); exports.createTask = async (req, res) => { const errors = validationResult(req); if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() }); try { const { title, description, status, dueDate, projectId, assigneeId } = req.body; const project = await Project.findByPk(projectId); if (!project) return res.status(400).json({ message: 'Invalid project' }); const task = await Task.create({ title, description, status, dueDate, projectId, assigneeId }); const io = req.app.get('io'); if (io) io.to('project:'+projectId).emit('task:created', task); res.json(task); } catch (err) { console.error(err); res.status(500).json({ message: 'Server error' }); } }; exports.updateTask = async (req, res) => { try { const task = await Task.findByPk(req.params.id); if (!task) return res.status(404).json({ message: 'Not found' }); await task.update(req.body); const io = req.app.get('io'); if (io) io.to('project:'+task.projectId).emit('task:updated', task); res.json(task); } catch (err) { console.error(err); res.status(500).json({ message: 'Server error' }); } }; exports.deleteTask = async (req, res) => { try { const task = await Task.findByPk(req.params.id); if (!task) return res.status(404).json({ message: 'Not found' }); const pid = task.projectId; await task.destroy(); const io = req.app.get('io'); if (io) io.to('project:'+pid).emit('task:deleted', { id: req.params.id }); res.json({ success: true }); } catch (err) { console.error(err); res.status(500).json({ message: 'Server error' }); } };
